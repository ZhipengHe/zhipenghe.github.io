<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://zhipenghe.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhipenghe.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-11T07:09:25+00:00</updated><id>https://zhipenghe.me/feed.xml</id><title type="html">Zhipeng ‚ÄúZippo‚Äù He - ‰ΩïÂøóÈπè</title><subtitle>Crafting ideas, solving problems, and exploring passions‚Äîwelcome to my world. </subtitle><author><name>Zhipeng &quot;Zippo&quot; He ‰ΩïÂøóÈπè</name></author><entry><title type="html">Docker API Exposure via Tailscale VPN - Windows Setup Guide (with WSL2 Backend)</title><link href="https://zhipenghe.me/blog/2025/Docker-API-Exposure-Windows/" rel="alternate" type="text/html" title="Docker API Exposure via Tailscale VPN - Windows Setup Guide (with WSL2 Backend)"/><published>2025-06-09T12:37:00+00:00</published><updated>2025-06-09T12:37:00+00:00</updated><id>https://zhipenghe.me/blog/2025/Docker-API-Exposure-Windows</id><content type="html" xml:base="https://zhipenghe.me/blog/2025/Docker-API-Exposure-Windows/"><![CDATA[<blockquote> <p>In <a href="/blog/2025/Docker-API-Exposure-Linux">last post</a>, I‚Äôve shown how to expose Docker‚Äôs API (port 2376) to your Tailscale VPN network on Linux systems. This post is a continuation of that guide, but for Windows with WSL2 backend.</p> </blockquote> <h2 id="overview">Overview</h2> <p>This guide shows how to expose Docker‚Äôs API (port 2375) to your Tailscale VPN network on Windows with WSL2 backend. It‚Äôs a simple guide for those who want to use Docker remotely or access the status of Docker Containers from another device.</p> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>We‚Äôre using port 2375 <strong>without SSL/TLS encryption</strong>. Thus, you need to use a VPN tunnel to provide encryption and access control.</p> </blockquote> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Docker Desktop for Windows with WSL2 backend</li> <li>Tailscale VPN installed and running</li> <li>Administrator access to Windows</li> </ul> <h2 id="step-1-enable-docker-api-in-docker-desktop">Step 1: Enable Docker API in Docker Desktop</h2> <ol> <li>Open Docker Desktop</li> <li>Go to <strong>Settings ‚Üí General</strong></li> <li>Check <strong>‚ÄúExpose daemon on tcp://localhost:2375 without TLS‚Äù</strong></li> <li>Click <strong>Apply &amp; Restart</strong></li> </ol> <h2 id="step-2-find-your-tailscale-ip-address">Step 2: Find Your Tailscale IP Address</h2> <pre><code class="language-cmd">ipconfig
</code></pre> <p>Look for the <strong>Tailscale adapter</strong> - note the IPv4 address (e.g., <code class="language-plaintext highlighter-rouge">100.xxx.xxx.xxx</code>)</p> <h2 id="step-3-set-up-port-forwarding-run-as-administrator">Step 3: Set Up Port Forwarding (Run as Administrator)</h2> <h3 id="open-powershell-as-administrator">Open PowerShell as Administrator:</h3> <ul> <li>Press <code class="language-plaintext highlighter-rouge">Win + X</code> ‚Üí Select ‚ÄúWindows PowerShell (Admin)‚Äù</li> <li>Or press <code class="language-plaintext highlighter-rouge">Win + R</code> ‚Üí type <code class="language-plaintext highlighter-rouge">powershell</code> ‚Üí press <code class="language-plaintext highlighter-rouge">Ctrl + Shift + Enter</code></li> </ul> <h3 id="run-these-commands">Run these commands:</h3> <pre><code class="language-cmd"># Add port forwarding rule (replace with your Tailscale IP)
netsh interface portproxy add v4tov4 listenport=2375 listenaddress=100.xxx.xxx.xxx connectport=2375 connectaddress=127.0.0.1

# Configure Windows Firewall (Optional but recommended)
netsh advfirewall firewall add rule name="Docker API Tailscale" dir=in action=allow protocol=TCP localport=2375
</code></pre> <h2 id="step-4-verify-setup">Step 4: Verify Setup</h2> <pre><code class="language-cmd"># Check port forwarding rules
netsh interface portproxy show all
</code></pre> <p>Expected output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Listen on ipv4:             Connect to ipv4:
Address         Port        Address         Port
--------------- ----------  --------------- ----------
100.xxx.xxx.xxx 2375        127.0.0.1       2375
</code></pre></div></div> <h2 id="step-5-test-connection">Step 5: Test Connection</h2> <p>From any device on your Tailscale network:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Test Docker connection</span>
docker <span class="nt">-H</span> tcp://100.xxx.xxx.xxx:2375 version

<span class="c"># Or test port connectivity</span>
telnet 100.xxx.xxx.xxx 2375
</code></pre></div></div> <h2 id="cleanup-commands-if-needed">Cleanup Commands (if needed)</h2> <pre><code class="language-cmd"># Remove port forwarding rule
netsh interface portproxy delete v4tov4 listenport=2375 listenaddress=100.xxx.xxx.xxx

# Remove firewall rule
netsh advfirewall firewall delete rule name="Docker API Tailscale"
</code></pre> <h2 id="security-notes">Security Notes</h2> <ul> <li>‚ö†Ô∏è <strong>Warning</strong>: This exposes Docker daemon without TLS encryption</li> <li>‚úÖ <strong>Safe</strong>: Tailscale provides encrypted VPN tunnel</li> <li>üîí <strong>Access</strong>: Only devices on your Tailscale network can connect</li> <li>üí° <strong>Tip</strong>: Tailscale IPs are usually stable and don‚Äôt change frequently</li> </ul> <h2 id="usage-examples">Usage Examples</h2> <p>Once configured, you can use Docker remotely:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set environment variable for easier use</span>
<span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://100.xxx.xxx.xxx:2375

<span class="c"># Now use Docker commands normally</span>
docker ps
docker images
docker run hello-world
</code></pre></div></div> <h2 id="troubleshooting">Troubleshooting</h2> <ul> <li><strong>Connection refused</strong>: Check if Docker Desktop is running</li> <li><strong>Port not accessible</strong>: Verify firewall rules and port forwarding</li> <li><strong>Permission denied</strong>: Ensure commands were run as Administrator</li> <li><strong>Tailscale IP changed</strong>: Update port forwarding rule with new IP</li> </ul>]]></content><author><name>Zhipeng &quot;Zippo&quot; He ‰ΩïÂøóÈπè</name></author><category term="Self-hosted"/><category term="Docker,"/><category term="Tailscale,"/><category term="Windows,"/><category term="WSL2"/><summary type="html"><![CDATA[This guide shows how to expose Docker's API (port 2375) to your Tailscale VPN network on Windows with WSL2 backend.]]></summary></entry><entry><title type="html">Docker API Exposure via Tailscale VPN - Linux Setup Guide</title><link href="https://zhipenghe.me/blog/2025/Docker-API-Exposure-Linux/" rel="alternate" type="text/html" title="Docker API Exposure via Tailscale VPN - Linux Setup Guide"/><published>2025-06-07T12:37:00+00:00</published><updated>2025-06-07T12:37:00+00:00</updated><id>https://zhipenghe.me/blog/2025/Docker-API-Exposure-Linux</id><content type="html" xml:base="https://zhipenghe.me/blog/2025/Docker-API-Exposure-Linux/"><![CDATA[<h2 id="overview">Overview</h2> <p>This guide shows how to expose Docker‚Äôs API (port 2376) to your Tailscale VPN network on Linux systems. It‚Äôs a simple guide for those who want to use Docker remotely or access the status of Docker Containers from another device.</p> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>We‚Äôre using port 2376 but <strong>without SSL/TLS encryption</strong>. Thus, you need to use a VPN tunnel to provide encryption and access control.</p> </blockquote> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Docker installed and running on Linux</li> <li>Tailscale VPN installed and connected</li> <li>sudo/root access to the system</li> </ul> <h2 id="step-1-find-your-tailscale-ip-address">Step 1: Find Your Tailscale IP Address</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Get your Tailscale IP</span>
tailscale ip <span class="nt">-4</span>
</code></pre></div></div> <p>Note the IP address (e.g., <code class="language-plaintext highlighter-rouge">100.xxx.xxx.xxx</code>) - you‚Äôll need this later.</p> <h2 id="step-2-configure-docker-daemon">Step 2: Configure Docker Daemon</h2> <h3 id="using-systemd-override-recommended">Using systemd Override (Recommended)</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create systemd override</span>
<span class="nb">sudo </span>systemctl edit docker.service
</code></pre></div></div> <p>Add this configuration (replace <code class="language-plaintext highlighter-rouge">100.xxx.xxx.xxx</code> with your actual Tailscale IP):</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Service]</span>
<span class="py">ExecStart</span><span class="p">=</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://100.xxx.xxx.xxx:2376 --containerd=/run/containerd/containerd.sock</span>
</code></pre></div></div> <h2 id="step-3-apply-configuration">Step 3: Apply Configuration</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Reload systemd and restart Docker</span>
<span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker

<span class="c"># Verify Docker is running</span>
<span class="nb">sudo </span>systemctl status docker
</code></pre></div></div> <h2 id="step-4-configure-firewall">Step 4: Configure Firewall</h2> <h3 id="for-ufw-ubuntudebian">For UFW (Ubuntu/Debian):</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install UFW if not present</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>ufw <span class="nt">-y</span>

<span class="c"># Allow SSH (important - don't lock yourself out!)</span>
<span class="nb">sudo </span>ufw allow ssh

<span class="c"># Allow existing services</span>
<span class="nb">sudo </span>ufw allow 80
<span class="nb">sudo </span>ufw allow 443

<span class="c"># Allow Docker API from Tailscale network</span>
<span class="nb">sudo </span>ufw allow from 100.64.0.0/10 to any port 2376

<span class="c"># Enable UFW</span>
<span class="nb">sudo </span>ufw <span class="nb">enable</span>

<span class="c"># Check status</span>
<span class="nb">sudo </span>ufw status numbered
</code></pre></div></div> <h3 id="for-iptables-direct-method">For iptables (Direct method):</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add rule to allow Docker API from Tailscale network</span>
<span class="nb">sudo </span>iptables <span class="nt">-I</span> INPUT <span class="nt">-p</span> tcp <span class="nt">--dport</span> 2376 <span class="nt">-s</span> 100.64.0.0/10 <span class="nt">-j</span> ACCEPT

<span class="c"># Save rules (method varies by distribution)</span>
<span class="c"># Ubuntu/Debian:</span>
<span class="nb">sudo </span>iptables-save <span class="o">&gt;</span> /etc/iptables/rules.v4

<span class="c"># CentOS/RHEL:</span>
<span class="nb">sudo </span>service iptables save
</code></pre></div></div> <h2 id="step-5-verify-setup">Step 5: Verify Setup</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check if Docker is listening on the correct port</span>
<span class="nb">sudo </span>ss <span class="nt">-tlnp</span> | <span class="nb">grep</span> :2376

<span class="c"># Check your Tailscale IP</span>
tailscale ip <span class="nt">-4</span>

<span class="c"># Test local connection</span>
curl http://<span class="si">$(</span>tailscale ip <span class="nt">-4</span><span class="si">)</span>:2376/containers/json
</code></pre></div></div> <p>Expected output should show JSON with container information.</p> <h2 id="step-6-test-from-remote-device">Step 6: Test from Remote Device</h2> <p>From another device on your Tailscale network:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Test Docker connection (replace with your Tailscale IP)</span>
curl http://100.xxx.xxx.xxx:2376/containers/json

<span class="c"># Or test with Docker client</span>
docker <span class="nt">-H</span> tcp://100.xxx.xxx.xxx:2376 ps
</code></pre></div></div> <h2 id="security-notes">Security Notes</h2> <ul> <li>‚ö†Ô∏è <strong>Warning</strong>: This exposes Docker daemon without TLS encryption</li> <li>‚úÖ <strong>Safe</strong>: Tailscale provides encrypted VPN tunnel</li> <li>üîí <strong>Access</strong>: Only devices on your Tailscale network can connect</li> <li>üí° <strong>Firewall</strong>: Uses Tailscale‚Äôs CGNAT range (100.64.0.0/10) for access control</li> <li>üõ°Ô∏è <strong>Best Practice</strong>: Consider using TLS certificates for production environments</li> </ul> <h2 id="usage-examples">Usage Examples</h2> <p>Once configured, you can use Docker remotely:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set environment variable for easier use (replace with your Tailscale IP)</span>
<span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://100.xxx.xxx.xxx:2376

<span class="c"># Now use Docker commands normally</span>
docker ps
docker images
docker run hello-world

<span class="c"># Use with docker-compose remotely</span>
docker-compose ps
docker-compose logs
</code></pre></div></div> <h2 id="troubleshooting">Troubleshooting</h2> <h3 id="docker-not-listening-on-port-2376">Docker not listening on port 2376:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check Docker process</span>
ps aux | <span class="nb">grep </span>dockerd

<span class="c"># Check systemd service</span>
<span class="nb">sudo </span>systemctl <span class="nb">cat </span>docker.service | <span class="nb">grep </span>ExecStart

<span class="c"># View Docker logs</span>
<span class="nb">sudo </span>journalctl <span class="nt">-u</span> docker.service <span class="nt">-f</span>
</code></pre></div></div> <h3 id="connection-refused-from-remote">Connection refused from remote:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check firewall rules</span>
<span class="nb">sudo </span>ufw status
<span class="c"># or</span>
<span class="nb">sudo </span>iptables <span class="nt">-L</span> <span class="nt">-n</span> | <span class="nb">grep </span>2376

<span class="c"># Test local connection first</span>
curl http://localhost:2376/containers/json
</code></pre></div></div> <h3 id="tailscale-connectivity-issues">Tailscale connectivity issues:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check Tailscale status</span>
tailscale status

<span class="c"># Restart Tailscale</span>
<span class="nb">sudo </span>systemctl restart tailscaled

<span class="c"># Re-authenticate if needed</span>
<span class="nb">sudo </span>tailscale up
</code></pre></div></div> <h3 id="docker-service-wont-start">Docker service won‚Äôt start:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check for configuration conflicts</span>
<span class="nb">sudo </span>journalctl <span class="nt">-u</span> docker.service <span class="nt">--no-pager</span> <span class="nt">-l</span>

<span class="c"># Temporarily remove custom config</span>
<span class="nb">sudo mv</span> /etc/docker/daemon.json /etc/docker/daemon.json.backup
<span class="nb">sudo </span>systemctl restart docker
</code></pre></div></div>]]></content><author><name>Zhipeng &quot;Zippo&quot; He ‰ΩïÂøóÈπè</name></author><category term="Self-hosted"/><category term="Docker,"/><category term="Tailscale,"/><category term="Linux"/><summary type="html"><![CDATA[This guide shows how to expose Docker's API (port 2376) to your Tailscale VPN network on Linux systems.]]></summary></entry><entry><title type="html">Surviving without VS Code Remote SSH</title><link href="https://zhipenghe.me/blog/2025/Surviving-without-VS-Code-Remote-SSH/" rel="alternate" type="text/html" title="Surviving without VS Code Remote SSH"/><published>2025-05-11T02:06:00+00:00</published><updated>2025-05-11T02:06:00+00:00</updated><id>https://zhipenghe.me/blog/2025/Surviving-without-VS-Code-Remote-SSH</id><content type="html" xml:base="https://zhipenghe.me/blog/2025/Surviving-without-VS-Code-Remote-SSH/"><![CDATA[<blockquote class="block-danger"> <h5 id="vs-code-remote-ssh-is-banned">VS Code Remote SSH is banned</h5> <p>QUT Aqua banned VS Code Remote SSH extension due to potential high workload on the node. Even you try to connect to Aqua through Remote SSH, it will be disconnected automatically after around 30 seconds. Check <a href="https://docs.eres.qut.edu.au/hpc-vscode-usage#using-vs-code-to-edit-files-on-the-hpc">this</a> for more details.</p> </blockquote> <p>So‚Ä¶ you‚Äôre trying to develop on QUT Aqua, but the server gods have other plans. Maybe you can‚Äôt use VS Code Remote SSH. Maybe you‚Äôre just feeling adventurous. But do not worry ‚Äî you can still edit remote files and develop like a champ. Here‚Äôs how I‚Äôve kept my sanity while developing on remote HPC systems.</p> <hr/> <h2 id="before-you-start">Before you start</h2> <h3 id="recommend-to-add-a-shortcut-to-sshconfig">Recommend to add a shortcut to <code class="language-plaintext highlighter-rouge">~/.ssh/config</code></h3> <p>If you are using SSH keys to connect to the HPC, you can add a shortcut to <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> to make your life easier. QUT Aqua documentation provides a <a href="https://docs.eres.qut.edu.au/hpc-getting-started-with-high-performance-computin#how-you-log-into-aqua-depends-on-the-operating-system-of-your-computer">guide</a> on how to set up SSH keys for passwordless login.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add to your ~/.ssh/config</span>
Host aqua
    HostName aqua.qut.edu.au
    User your-username
    IdentityFile ~/.ssh/id_rsa_aqua <span class="c"># Add your SSH key here</span>
    ServerAliveInterval 60
</code></pre></div></div> <p>Then, you can connect to the HPC by running <code class="language-plaintext highlighter-rouge">ssh aqua</code>. Also, you can use <code class="language-plaintext highlighter-rouge">aqua</code> to replace <code class="language-plaintext highlighter-rouge">your-username@aqua.qut.edu.au</code> in the following commands.</p> <hr/> <h2 id="-1-fake-it-with-ssh-mounted-folders">üß© 1. Fake it with SSH-mounted folders</h2> <h3 id="-option-a-mount-via-finder--the-cheese-board-approach">üßÄ Option A: Mount via Finder ‚Äî the cheese board approach</h3> <blockquote> <p>Here‚Äôs a quick guide for macOS users. Please refer to the <a href="https://docs.eres.qut.edu.au/hpc-transferring-files-tofrom-hpc#using-file-explorer-or-finder-to-mount-a-drive-to-the-hpc">QUT Aqua documentation</a> for other OS.</p> </blockquote> <ol> <li>Open <strong>Finder</strong> ‚Üí <code class="language-plaintext highlighter-rouge">Go</code> ‚Üí <code class="language-plaintext highlighter-rouge">Connect to Server...</code></li> <li> <p>Enter:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> smb://hpc-fs/home/
</code></pre></div> </div> </li> <li>Mount it, then open the folder in VS Code like it‚Äôs 1999.</li> </ol> <p>üìù <em>Note</em>: You can edit files, but <strong>no shell</strong>, <strong>no Git</strong>, and no terminal tantrums. It‚Äôs like eating cake without the frosting.</p> <h4 id="but--is-this-method-elegant">But ‚Ä¶ is this method elegant?</h4> <p>You‚Äôve mounted an SMB share to your Finder. Congratulations! You‚Äôve just volunteered for the following comedy of errors:</p> <ol> <li><strong>Git? More like ‚ÄúGet Lost‚Äù</strong> - Your carefully crafted version control system now has all the functionality of a chocolate teapot. Want to commit changes? Sorry, Git is too sophisticated for your peasant SMB connection. It‚Äôs like bringing a quantum physicist to a kindergarten counting class.</li> <li><strong>VS Code‚Äôs Terminal: The Phantom Feature</strong> - That beautiful integrated terminal in VS Code? It now stares at you like a confused puppy. <code class="language-plaintext highlighter-rouge">Command not found</code> becomes your new error mantra. It‚Äôs there‚Ä¶ but also not there, like your motivation on Monday mornings.</li> <li><strong>The Mysterious Disconnection</strong> - Nothing says ‚Äúsurprise vacation‚Äù like your SMB connection randomly dropping when you‚Äôre in the middle of important work. It‚Äôs like having a co-worker who pulls the fire alarm whenever they‚Äôre bored.</li> <li><strong>HPC Disruption: The Digital Hostage Situation</strong> - Ah, you‚Äôve put ALL your files on the server! So when the High-Performance Computing cluster decides to have its quarterly existential crisis (or weekly, who‚Äôs counting?), your work becomes as accessible as your childhood memories. Your options? Make coffee, stare wistfully out the window.</li> <li><strong>The .DS_Store Epidemic: Exclusive for macOS</strong> - Ah, macOS and its infamous <code class="language-plaintext highlighter-rouge">.DS_Store</code> files! Your Mac scatters these digital breadcrumbs in every folder you visit like an overzealous tourist taking selfies at landmarks. The HPC server, meanwhile, treats them with the same enthusiasm as finding glitter in its keyboard ‚Äì ‚ÄúThanks for the desktop settings I absolutely didn‚Äôt ask for and can‚Äôt use!‚Äù</li> </ol> <div class="text-center mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/DS_Store-meme-480.webp 480w,/assets/img/posts/DS_Store-meme-800.webp 800w,/assets/img/posts/DS_Store-meme-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/DS_Store-meme.png" class="img-fluid rounded z-depth-1 w-50" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-style: italic;"> <b>For macOS users only:</b> Check out <a href="/blog/2025/The-DS_Store-Strikes-Back">The .DS_Store Strikes Back: Finder Edition</a> about how to solve it (or not). </div> <p><br/></p> <h3 id="-option-b-sshfs--mount-through-ssh-wizardry">üîß Option B: SSHFS ‚Äî Mount through SSH Wizardry</h3> <p>Mount your HPC home directory <em>directly</em> via SSH, no Finder fluff. It‚Äôs like having your HPC filesystem in your pocket.</p> <h4 id="for-macos-users">For macOS Users:</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install the prerequisites (because your Mac doesn't come with everything, despite what Apple claims)</span>
brew <span class="nb">install </span>macfuse
brew <span class="nb">install </span>gromgit/fuse/sshfs-mac

<span class="c"># Mount your HPC home (1)</span>
<span class="nb">mkdir</span> ~/aqua
sshfs your-username@aqua.qut.edu.au:/home/your-username ~/aqua <span class="c">#(2)</span>

<span class="c"># When you're done pretending these files are local</span>
umount ~/aqua
<span class="c"># Or if that fails spectacularly (as technology loves to do)</span>
diskutil unmount ~/aqua
</code></pre></div></div> <p>Notes:</p> <ol> <li>When you‚Äôre running <code class="language-plaintext highlighter-rouge">sshfs</code> first time, you will be asked to go to ‚ÄúSystem Preferences‚Äù ‚Üí ‚ÄúSecurity &amp; Privacy‚Äù ‚Üí ‚ÄúSecurity‚Äù ‚Üí click ‚ÄúAllow‚Äù for running the app. Then you also need to restart your Mac.</li> <li>You can use <code class="language-plaintext highlighter-rouge">aqua</code> to replace <code class="language-plaintext highlighter-rouge">your-username@aqua.qut.edu.au</code> if you have added a shortcut to <code class="language-plaintext highlighter-rouge">~/.ssh/config</code>.</li> </ol> <h4 id="for-linux-users-ubuntu">For Linux Users (Ubuntu):</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install SSHFS (because of course Linux makes you work for everything)</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>sshfs

<span class="c"># Mount your HPC home, telling the laws of physics to take a break</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/aqua
sshfs your-username@aqua.qut.edu.au:/home/your-username ~/aqua <span class="nt">-o</span> follow_symlinks

<span class="c"># To send these files back to their natural habitat</span>
fusermount <span class="nt">-u</span> ~/aqua
</code></pre></div></div> <h4 id="for-windows-users">For Windows Users:</h4> <p>Install <a href="https://github.com/winfsp/winfsp/releases">WinFSP</a> and <a href="https://github.com/winfsp/sshfs-win/releases">SSHFS-Win</a>, because Windows needs two separate things to do what other systems accomplish with one. Then use Windows Explorer (which Microsoft keeps renaming as if that will make us forget its bugs) to map a network drive:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\\sshfs\your-username@aqua.qut.edu.au
</code></pre></div></div> <p>Then open it in VS Code like you‚Äôve just performed a miracle:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code ~/aqua
</code></pre></div></div> <p>‚úÖ <em>Pro</em>: Looks local. Feels local. Git operations work‚Ä¶ until they mysteriously don‚Äôt</p> <p>‚ùå <em>Con</em>: Feels <strong>too</strong> local for large files. Might lag. If the connection drops, your filesystem freezes like it‚Äôs seen a ghost</p> <blockquote class="block-tip"> <h5 id="performance-tips-that-might-help-no-promises">Performance Tips That Might Help (No Promises)</h5> <ul> <li>Use <code class="language-plaintext highlighter-rouge">-o cache=yes</code> to create the illusion of performance (side effects may include file synchronization existential crises)</li> <li>Add <code class="language-plaintext highlighter-rouge">-o compression=yes</code> to squeeze your data through the internet tubes more efficiently</li> <li>If everything hangs, adjust your <code class="language-plaintext highlighter-rouge">ServerAlive</code> settings, which is like giving your connection a gentle nudge every few minutes to check if it‚Äôs still breathing</li> </ul> </blockquote> <blockquote class="block-tip"> <h5 id="working-with-git-over-sshfs-a-tragicomedy">Working with Git Over SSHFS: A Tragicomedy</h5> <p>When using Git over SSHFS, you‚Äôre essentially asking Git to perform a synchronized swimming routine while blindfolded. For anything more complex than a simple commit, consider SSH-ing directly into the server and running Git commands there. Your future self will thank you for not testing the limits of your patience.</p> </blockquote> <hr/> <h2 id="-2-rsync-scp-and-git-your-old-school-sync-buddies">üîÑ 2. <code class="language-plaintext highlighter-rouge">rsync</code>, <code class="language-plaintext highlighter-rouge">scp</code> and <code class="language-plaintext highlighter-rouge">git</code>: Your old-school sync buddies</h2> <h3 id="Ô∏è-option-a-rsync--scp--the-reliable-workhorse">‚öôÔ∏è Option A: <code class="language-plaintext highlighter-rouge">rsync</code> &amp; <code class="language-plaintext highlighter-rouge">scp</code> ‚Äî The Reliable Workhorse</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Sync your local code to HPC</span>
rsync <span class="nt">-avz</span> ./my-project/ your-username@aqua.qut.edu.au:/home/your-username/projects/

<span class="c"># Sync back from HPC</span>
rsync <span class="nt">-avz</span> your-username@aqua.qut.edu.au:/home/your-username/projects/ ./my-project/
</code></pre></div></div> <p>Or for a quick one-file fling:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp script.py your-username@aqua.qut.edu.au:/home/your-username/projects/
</code></pre></div></div> <p>It‚Äôs not fancy, but it works ‚Äî like duct tape.</p> <p><br/></p> <h3 id="-option-b-git--the-version-control-way">‚ö° Option B: Git ‚Äî The Version Control Way</h3> <p>If you are version-controlling your life (as you should), Git is a clean and reliable method.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># On your local machine</span>
git init
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>
git remote add aqua your-username@aqua.qut.edu.au:/path/to/repo
git push aqua main

<span class="c"># On the HPC</span>
git clone your-username@aqua.qut.edu.au:/path/to/repo
</code></pre></div></div> <p>‚úÖ <em>Pro</em>: Clean history, branch control, reproducibility</p> <p>‚ùå <em>Con</em>: Needs initial setup and your SSH keys must behave</p> <hr/> <h2 id="Ô∏è-3-the-terminal-only-approach">üñ•Ô∏è 3. The Terminal-Only Approach</h2> <p>When all else fails, embrace the terminal:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh your-username@aqua.qut.edu.au
</code></pre></div></div> <p>Then pick your weapon of choice:</p> <ul> <li><code class="language-plaintext highlighter-rouge">vim</code> ‚Äî For the brave</li> <li><code class="language-plaintext highlighter-rouge">nano</code> ‚Äî For the sane</li> <li><code class="language-plaintext highlighter-rouge">neovim</code> ‚Äî For the modern</li> <li><code class="language-plaintext highlighter-rouge">emacs</code> ‚Äî For the‚Ä¶ unique</li> </ul> <p>üéØ <em>Bonus</em>: Fast, keyboard-driven, and doesn‚Äôt require GUI permission forms.</p> <blockquote> <p><em>Note</em>: I will write another page about how to use <code class="language-plaintext highlighter-rouge">neovim</code> and its plugins to replace VS Code as a lightweight editor (with SSH).</p> </blockquote> <hr/> <h2 id="-4-the-web-based-approach">üåê 4. The Web-Based Approach</h2> <h3 id="-option-a-jupyter-notebooks">üìì Option A: Jupyter Notebooks</h3> <blockquote class="block-tip"> <h5 id="install-jupyter-lab-in-hpc-before-you-start">Install Jupyter Lab in HPC before you start</h5> <p>QUT Aqua documentation provides a <a href="https://docs.eres.qut.edu.au/hpc-accessing-available-software#install-conda">guide</a> on how to install Miniconda in HPC.</p> </blockquote> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># On the HPC</span>
<span class="c"># I prefer to use Jupyter Lab instead of Jupyter Notebook</span>
jupyter lab <span class="nt">--no-browser</span> <span class="nt">--port</span><span class="o">=</span>8888 <span class="c"># (1)</span>

<span class="c"># On your local machine, forward the port 8888 to your local machine</span>
<span class="c"># local_port:localhost:remote_port (2)</span>
ssh <span class="nt">-N</span> <span class="nt">-L</span> 8888:localhost:8888 your-username@aqua.qut.edu.au
</code></pre></div></div> <p>Notes:</p> <ol> <li>If port 8888 is already in use, you can try another port, e.g. 8889.</li> <li><code class="language-plaintext highlighter-rouge">-N</code> means no command to run on the remote machine. <code class="language-plaintext highlighter-rouge">-L</code> means forward the local port to the remote port. Both local and remote ports are 8888 in this case.</li> </ol> <p><br/></p> <h3 id="-option-b-vscode-in-browser">üî• Option B: VSCode in Browser</h3> <blockquote class="block-warning"> <h5 id="this-might-require-a-sysadmins-blessing">This might require a sysadmin‚Äôs blessing!</h5> <p>Fortunately, the server gods haven‚Äôt locked <em>everything</em> down:</p> </blockquote> <ol> <li> <p>Install <a href="https://github.com/coder/code-server"><code class="language-plaintext highlighter-rouge">code-server</code></a> on the HPC.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># On HPC server</span>
 <span class="c"># Install code-server to your home directory</span>
 curl <span class="nt">-fsSL</span> https://code-server.dev/install.sh | sh <span class="nt">-s</span> <span class="nt">--</span> <span class="nt">--method</span> standalone <span class="nt">--prefix</span><span class="o">=</span><span class="nv">$HOME</span>
 <span class="c"># code-server will be installed to $HOME/bin/code-server</span>

 <span class="c"># check if code-server is installed</span>
 code-server <span class="nt">--version</span>

 <span class="c"># Start code-server</span>
 code-server  <span class="nt">--bind-addr</span> 127.0.0.1:8080 <span class="nt">--disable-telemetry</span> <span class="nt">--disable-update-check</span> <span class="nt">--auth</span> none

 <span class="c"># On your local machine</span>
 <span class="c"># Forward the port 8080 to your local machine</span>
 ssh <span class="nt">-N</span> <span class="nt">-L</span> 8080:127.0.0.1:8080 your-username@aqua.qut.edu.au
</code></pre></div> </div> </li> <li> <p>Open it in your browser</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># Open the web page in your browser</span>
 http://localhost:8080
</code></pre></div> </div> </li> <li> <p>Marvel as VS Code rises from the ashes ‚Äî web-style</p> </li> </ol> <blockquote class="block-tip"> <h5 id="sync-vs-code-settings-to-code-server">Sync VS Code settings to code-server</h5> <p>You can import your VS Code settings to code-server by importing the profile from VS Code. Check out <a href="https://code.visualstudio.com/docs/configure/profiles#_share-profiles">this page</a> for more details about how to export and import profiles. However, this‚Äôs not the perfect solution. Not all VS Code extensions are available for code-server, some extensions are restricted for Microsoft VS Code. Only the extensions that are available for code-server are listed in <a href="https://open-vsx.org/">Open VSX Registry</a>.</p> </blockquote> <h4 id="run-code-server-in-the-background-with-tmux">Run code-server in the background with <code class="language-plaintext highlighter-rouge">tmux</code></h4> <p>You can run code-server in the background with <code class="language-plaintext highlighter-rouge">tmux</code> to avoid the session being killed after you disconnect from the HPC.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start a new tmux session</span>
tmux new <span class="nt">-s</span> code

<span class="c"># Run code-server in the background</span>
code-server <span class="nt">--bind-addr</span> 127.0.0.1:8080 <span class="nt">--disable-telemetry</span> <span class="nt">--disable-update-check</span> <span class="nt">--auth</span> none

<span class="c"># Detach from the tmux session: `Ctrl+b`, then `d`</span>

<span class="c"># Reattach to the tmux session</span>
tmux attach <span class="nt">-t</span> code

<span class="c"># Kill the tmux session</span>
tmux kill-session <span class="nt">-t</span> code

<span class="c"># If you forget the session name, you can list all sessions</span>
tmux <span class="nb">ls</span>
</code></pre></div></div> <h4 id="known-issue-on-integrated-terminal-and-extension-host">Known issue on Integrated Terminal and Extension Host</h4> <p>I found that the terminal and the extension host are not stable when using code-server. The issue seems to revolve around the <strong>ptyHost</strong>, <strong>File Watcher</strong>, and <strong>Extension Host</strong>, and it‚Äôs being <strong>repeatedly killed by SIGTERM</strong>.</p> <p>üß† <strong>What Is Happening?</strong></p> <pre><code class="language-log">[12:18:01] ptyHost terminated unexpectedly with code null
[12:18:01] [File Watcher (universal)] restarting watcher after unexpected error: terminated by itself with code null, signal: SIGTERM (ETERM)
[12:18:01] [127.0.0.1][d0f383fd][ExtensionHostConnection] &lt;3126357&gt; Extension Host Process exited with code: null, signal: SIGTERM.
[12:18:02] [127.0.0.1][d0f383fd][ExtensionHostConnection] Unknown reconnection token (seen before).
[12:18:02] [127.0.0.1][368c67ad][ExtensionHostConnection] New connection established.
[12:18:02] [127.0.0.1][368c67ad][ExtensionHostConnection] &lt;3132486&gt; Launched Extension Host Process.
</code></pre> <p>üìú <strong>From the logs:</strong></p> <ul> <li>üí• The <code class="language-plaintext highlighter-rouge">ptyHost</code> process (responsible for terminal sessions) crashed or was killed ‚Äî possibly due to system resource limits or policy.</li> <li>üì¶ File watcher was forcefully killed (SIGTERM) ‚Äî system or job policy likely did this.</li> <li>üß© Extension host was also killed ‚Äî same reason, likely tied to HPC rules.</li> <li>‚Ü©Ô∏è code-server tried to reconnect to the crashed extension host but failed.</li> <li>üÜï code-server restarted the extension host process automatically.</li> </ul> <hr/> <h2 id="tldr--what-works-and-what-requires-sacrifice">TL;DR ‚Äî What Works (and What Requires Sacrifice)</h2> <table> <thead> <tr> <th>üõ†Ô∏è Method</th> <th>üßë‚Äçüíª Edit in VS Code</th> <th>üñ•Ô∏è Terminal Access</th> <th>üìÇ Where Files Live</th> <th>üñºÔ∏è GUI Needed</th> <th>‚ö° Vibe Check</th> </tr> </thead> <tbody> <tr> <td><strong>SMB (Finder)</strong></td> <td>‚úÖ Yes, like it‚Äôs local</td> <td>‚ùå Nope, just files</td> <td>üåê Remote (mounted)</td> <td>‚úÖ Yes</td> <td>üßÄ ‚ÄúCheesy but it works‚Äù</td> </tr> <tr> <td><strong>SSHFS</strong></td> <td>‚úÖ Yes (mostly)</td> <td>‚ùå Not really</td> <td>üåê Remote (mounted)</td> <td>‚ùå Nope</td> <td>üê¢ ‚ÄúKinda slow, kinda cool‚Äù</td> </tr> <tr> <td><strong>rsync / Git</strong></td> <td>‚úÖ Edit local, sync later</td> <td>‚úÖ Full control</td> <td>üìÇ Local (then synced)</td> <td>‚ùå Nope</td> <td>üî® ‚ÄúOld school, solid‚Äù</td> </tr> <tr> <td><strong>Terminal Editors</strong></td> <td>‚ùå No GUI, no problem</td> <td>‚úÖ Born in the terminal</td> <td>üåê Remote (SSH only)</td> <td>‚ùå Nope</td> <td>üíÄ ‚ÄúFor shell warriors‚Äù</td> </tr> <tr> <td><strong>Jupyter</strong></td> <td>‚úÖ Yes, via browser</td> <td>‚úÖ If allowed</td> <td>üåê Remote (Jupyter workspace)</td> <td>‚úÖ Yes</td> <td>üß™ ‚ÄúScience with style‚Äù</td> </tr> <tr> <td><strong>code-server</strong></td> <td>‚úÖ Yes, but web-based</td> <td>‚ùì Unstable</td> <td>üåê Remote (in browser)</td> <td>‚úÖ Yes</td> <td>üßô ‚ÄúFeels like cheating‚Äù</td> </tr> </tbody> </table> <hr/> <h2 id="final-words">Final Words</h2> <p>Remote development on HPC doesn‚Äôt have to be a pain. Pick your poison, set up your workflow, and remember: the best development environment is the one that doesn‚Äôt make you want to throw your computer out the window.</p> <p>Happy coding, and may your HPC connections be stable! üöÄ</p>]]></content><author><name>Zhipeng &quot;Zippo&quot; He ‰ΩïÂøóÈπè</name></author><category term="HPC"/><category term="Aqua,"/><category term="VSCode,"/><category term="SSH"/><summary type="html"><![CDATA[Or: "They took away my extension, but not my will to code."]]></summary></entry></feed>